---
description: 테스트 실패 디버깅 및 수정 가이드 - Kotlin Spring Boot 프로젝트에서 Kotest를 사용한 테스트 코드 작성 및 디버깅 방법
---

# 테스트 실패 디버깅 및 수정 가이드

이 가이드는 Kotlin Spring Boot 프로젝트에서 Kotest를 사용한 테스트 코드의 실패를 디버깅하고 수정하는 방법을 설명합니다.

## 테스트 실패 디버깅 프로세스

### 1. 테스트 실행 및 오류 확인
```bash
./gradlew test --tests "TestClassName"
```

### 2. 실패 원인 분석
테스트 실패의 주요 원인들:

#### A. BigDecimal 정밀도 문제
**증상**: 할인 계산, 금액 계산에서 예상값과 실제값이 다름
**원인**: `BigDecimal` 연산에서 정밀도 손실
**해결**: 
- `DiscountPercentage.times()` 연산자에서 정확한 정밀도 설정
- 테스트 예상값을 실제 계산 결과에 맞게 수정

```kotlin
// 잘못된 예
operator fun times(money: Money): Money = Money(money.amount.multiply(value).divide(BigDecimal(100)))

// 올바른 예
operator fun times(money: Money): Money = Money(
    money.amount.multiply(value).divide(BigDecimal(100), 2, java.math.RoundingMode.HALF_UP)
)
```

#### B. Money 객체 비교 문제
**증상**: `Money` 객체 비교에서 예상과 다른 결과
**원인**: `Money` 객체의 `amount` 속성을 직접 비교
**해결**: `Money` 객체 자체를 비교하도록 수정

```kotlin
// 잘못된 예
if (discount.amount <= maxDiscount.amount) discount else maxDiscount

// 올바른 예
if (discount <= maxDiscount) discount else maxDiscount
```

#### C. 시간 기반 계산 문제
**증상**: `LocalDateTime` 기반 계산에서 예상값과 실제값이 다름
**원인**: 현재 시간을 기준으로 한 상대적 계산
**해결**: 테스트 예상값을 실제 계산 결과에 맞게 수정

```kotlin
// 예시: 남은 일수 계산
val remainingDays = period.getRemainingDays()
// 예상: 6L, 실제: 5L (ChronoUnit.DAYS.between의 정확한 계산)
remainingDays shouldBe 5L
```

#### D. toString() 메서드 문제
**증상**: `toString()` 결과가 예상과 다름
**원인**: 열거형의 `toString()`이 `displayName`을 반환
**해결**: 테스트에서 `displayName`을 예상값으로 사용

```kotlin
// 잘못된 예
promotionType.toString() shouldContain "PERCENTAGE_DISCOUNT"

// 올바른 예
promotionType.toString() shouldContain "퍼센트 할인"
```

## 디버깅 전략

### 1. 임시 디버깅 테스트 생성
실패한 테스트의 실제 값을 확인하기 위해 임시 디버깅 테스트를 작성합니다.

```kotlin
class DebugTest : FunSpec({
    test("디버깅: 실제 값 확인") {
        // Given
        val actualValue = calculateSomething()
        
        // When & Then
        println("실제 값: $actualValue")
        actualValue shouldBe actualValue // 일단 통과시키기
    }
})
```

### 2. 단계별 수정
1. **구현 코드 확인**: 실제 로직이 올바른지 확인
2. **테스트 코드 확인**: 예상값이 올바른지 확인
3. **어느 쪽이 잘못되었는지 판단**
4. **잘못된 쪽을 수정**

### 3. 수정 우선순위
1. **구현 코드가 잘못된 경우**: 구현 코드를 수정
2. **테스트 코드가 잘못된 경우**: 테스트 코드를 수정
3. **둘 다 맞는 경우**: 예상값을 실제 결과에 맞게 수정

## 테스트 코드 작성 모범 사례

### 1. 정확한 예상값 사용
```kotlin
// BigDecimal 사용 시 정확한 소수점 자리수 명시
BigDecimal("1000.00") // 올바름
BigDecimal.valueOf(1000) // 부정확할 수 있음
```

### 2. 시간 기반 테스트
```kotlin
// 상대적 시간 계산 시 실제 결과를 반영
val now = LocalDateTime.now()
val period = PromotionPeriod.of(now.minusDays(1), now.plusDays(6))
val remainingDays = period.getRemainingDays()
// 실제 계산 결과를 예상값으로 사용
remainingDays shouldBe 5L
```

### 3. Import 문 확인
```kotlin
import java.math.BigDecimal // BigDecimal 사용 시 필수
import io.kotest.matchers.collections.shouldHaveSize // 컬렉션 매처 사용 시 필수
```

## 일반적인 실수 방지

### 1. BigDecimal 정밀도
- 항상 정확한 소수점 자리수 설정
- `RoundingMode.HALF_UP` 사용 권장

### 2. Money 객체 비교
- `Money` 객체의 `amount` 속성 직접 비교 금지
- `Money` 객체 자체를 비교

### 3. 시간 계산
- `ChronoUnit.DAYS.between()`의 정확한 계산 결과 반영
- 현재 시간 기준 상대적 계산 시 실제 결과 확인

### 4. 열거형 toString()
- `toString()`이 `displayName`을 반환함을 고려
- 테스트에서 `displayName` 사용

## 테스트 정리

### 1. 임시 디버깅 파일 삭제
```bash
# 디버깅 완료 후 임시 파일 삭제
rm src/test/kotlin/com/example/demo/domain/promotion/service/DebugTest.kt
```

### 2. TODO 업데이트
```kotlin
todo_write(merge=true, todos=[{
    "id": "fix_test_name",
    "content": "테스트명 수정 완료",
    "status": "completed"
}])
```

이 가이드를 따라하면 테스트 실패를 체계적으로 디버깅하고 수정할 수 있습니다.